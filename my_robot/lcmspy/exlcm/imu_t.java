/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_t implements lcm.lcm.LCMEncodable
{
    public float yaw;
    public float roll;
    public float pitch;
    public float mag_x;
    public float mag_y;
    public float mag_z;
    public float accel_x;
    public float accel_y;
    public float accel_z;
    public float gyro_x;
    public float gyro_y;
    public float gyro_z;
 
    public imu_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa8d9b88010e98a48L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.imu_t.class))
            return 0L;
 
        classes.add(exlcm.imu_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.yaw); 
 
        outs.writeFloat(this.roll); 
 
        outs.writeFloat(this.pitch); 
 
        outs.writeFloat(this.mag_x); 
 
        outs.writeFloat(this.mag_y); 
 
        outs.writeFloat(this.mag_z); 
 
        outs.writeFloat(this.accel_x); 
 
        outs.writeFloat(this.accel_y); 
 
        outs.writeFloat(this.accel_z); 
 
        outs.writeFloat(this.gyro_x); 
 
        outs.writeFloat(this.gyro_y); 
 
        outs.writeFloat(this.gyro_z); 
 
    }
 
    public imu_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.imu_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.imu_t o = new exlcm.imu_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.yaw = ins.readFloat();
 
        this.roll = ins.readFloat();
 
        this.pitch = ins.readFloat();
 
        this.mag_x = ins.readFloat();
 
        this.mag_y = ins.readFloat();
 
        this.mag_z = ins.readFloat();
 
        this.accel_x = ins.readFloat();
 
        this.accel_y = ins.readFloat();
 
        this.accel_z = ins.readFloat();
 
        this.gyro_x = ins.readFloat();
 
        this.gyro_y = ins.readFloat();
 
        this.gyro_z = ins.readFloat();
 
    }
 
    public exlcm.imu_t copy()
    {
        exlcm.imu_t outobj = new exlcm.imu_t();
        outobj.yaw = this.yaw;
 
        outobj.roll = this.roll;
 
        outobj.pitch = this.pitch;
 
        outobj.mag_x = this.mag_x;
 
        outobj.mag_y = this.mag_y;
 
        outobj.mag_z = this.mag_z;
 
        outobj.accel_x = this.accel_x;
 
        outobj.accel_y = this.accel_y;
 
        outobj.accel_z = this.accel_z;
 
        outobj.gyro_x = this.gyro_x;
 
        outobj.gyro_y = this.gyro_y;
 
        outobj.gyro_z = this.gyro_z;
 
        return outobj;
    }
 
}

